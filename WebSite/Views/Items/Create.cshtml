@using System.Web.Mvc.Html
@using WebSite.Models
@model WebSite.Item

@{
    ViewBag.Title = "Create new lot";
}

<h2>Create new lot</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="create-item-form">
        <div class="col-sm-12">
            <div class="row form-group">
                <div class="col-sm-4 text-center">
                    <img id="item-image" src="" alt="image" />
                    <br />
                    <br />
                    <label class="btn btn-primary" for="file-btn">
                        <input id="file-btn" type="file" style="display: none;" onchange="uploadImage()">
                        Add image
                    </label>
                </div>
                <div class="col-sm-8">
                    <div class="row form-group">
                        <div class="col-sm-4 no-padding">
                            Name
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control datepicker", @required = "required" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row form-group">
                        <div class="col-sm-4 no-padding">
                            Select a category
                        </div>
                        <div class="col-sm-8">
                            @Html.DropDownList("CategoryId", null, htmlAttributes: new { @class = "form-control", @required = "required", @onchange = "getFeatures()", @id = "categoryId" })
                        </div>
                    </div>

                    <div class="row form-group">
                        <div class="target"></div>
                    </div>

                    <div class="form-group row">
                        <div class="col-sm-4 no-padding">
                            Minimal aviable bet
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.MinBet, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                            @Html.ValidationMessageFor(model => model.MinBet, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row form-group">
                        <div class="col-sm-4 no-padding">
                            Aviable to
                        </div>
                        <div class="col-md-8">
                            <div class='input-group date' id='datetimepicker'>
                                @Html.EditorFor(model => model.DueDateTime, new { htmlAttributes = new { @class = "form-control datepicker", @required = "required" } })
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.DueDateTime, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    
                    <div class="row form-group">
                        <div class="col-sm-4 no-padding">
                            General description
                        </div>
                        <div class="col-sm-8">
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control description", @required = "required" })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            @*<div class="row form-group">
                    <div class="col-sm-4">
                        CHECKBOXES
                    </div>
                </div>*@
        </div>
        <div class="form-group row">
            <div class="col-sm-offset-4 col-md-8">
                <div class="col-sm-offset-4 col-sm-8">
                    <input type="submit" value="Create" class="btn btn-defaul create-btn" />
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript">
    $(document).ready(function () {
        $(function () {
            $('#datetimepicker').datetimepicker();
        });
    });

    function getFeatures() {
        var id = $("#categoryId").val();
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetFeatures", "Items")',
            data: { categoryId: id },
            success: function (viewHTML) {
                $(".target").html(viewHTML);
            },
            error: function (errorData) { console.log(errorData); }
        });
    }

    function getImage() {
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetImage", "Items")',
            success: function (data) {
                $("#item-image").attr("src", data);
            },
            error: function (errorData) { console.log(errorData); }
        });
    }

    function uploadImage() {
        var input = document.getElementById('file-btn'),
            data = new FormData();
        data.append("ItemImage", input.files[0]);
        $.ajax({
            type: "POST",
            url: '@Url.Action("ImageUpload", "Items")',
            data: data,
            dataType: 'json',
            contentType: false,
            processData: false,
            allways: getImage
        }).always(getImage);
    }

    getImage();
</script>

@helper GetFeatures(byte? selectedCategory, List<FeatureViewModel> features)
{
    if (selectedCategory == null)
    {
        return;
    }

    var featuresForCategory = features.Where(x => x.CategoryId == selectedCategory.Value);

    foreach (var feature in featuresForCategory)
    {
        <div class="row form-group">
            <div class="col-sm-4">
                @feature.Name
            </div>
            <select class="form-control" name="feature-@feature.Id">
                <option value="" disabled selected>Select a category</option>
                @foreach (var value in feature.PosibleValues)
                {
                    <option>@value</option>
                }
            </select>
        </div>
    }
}
